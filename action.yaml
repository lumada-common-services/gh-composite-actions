name: Workflow Template
description: "Composite Action Template"
inputs:
  command:
    description: "A command line statement"

runs:
  using: "composite"
  steps: 
    - name: Setup Steps Tracking
      shell: bash
      run: |
        if [ ! -e $RUNNER_TEMP/icons.properties ]; then
          echo "sonar_scan=x" >> $RUNNER_TEMP/icons.properties
          echo "build=x" >> $RUNNER_TEMP/icons.properties
          echo "unit_test=x" >> $RUNNER_TEMP/icons.properties
          echo "integration_test=x" >> $RUNNER_TEMP/icons.properties
          echo "generic_test=x" >> $RUNNER_TEMP/icons.properties

          if [ "${{ github.event_name }}" != "pull_request" ]; then
            # echo "blackduck_scan=x" >> $RUNNER_TEMP/icons.properties
            echo "citadel_scan=x" >> $RUNNER_TEMP/icons.properties
            echo "create_tag=x" >> $RUNNER_TEMP/icons.properties
            echo "deploy=x" >> $RUNNER_TEMP/icons.properties
          fi

        fi

    - name: Commands Execution
      if: ${{ inputs.command }}
      id: run-command
      run: ${{ inputs.command }}
      shell: bash

    - name: Commands Execution tracking
      shell: bash
      if: ${{ always() && inputs.command }}
      run: |
        icon="boom"

        IFS=',' read -ra cmd_types <<< "${{ env.cmd_type }}"
        for type in "${cmd_types[@]}"; do

          if [ "$type" == "BUILD" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            sed -i "s/build=x/build=${icon}/g" $RUNNER_TEMP/icons.properties

          elif [ "$type" == "UNIT_TEST" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            sed -i "s/unit_test=x/unit_test=${icon}/g" $RUNNER_TEMP/icons.properties

          elif [ "$type" == "INTEGRATION_TEST" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            sed -i "s/integration_test=x/integration_test=${icon}/g" $RUNNER_TEMP/icons.properties

          elif [ "$type" == "DEPLOY" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            sed -i "s/deploy=x/deploy=${icon}/g" $RUNNER_TEMP/icons.properties

          elif [ "$type" == "TEST" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            sed -i "s/generic_test=x/generic_test=${icon}/g" $RUNNER_TEMP/icons.properties
          
          elif [ "$type" == "" ]; then

            [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
            cmd=$(echo "${{ inputs.command }}" | sed -e 's/|/\\|/')
            echo "${icon}=${cmd}" >> $RUNNER_TEMP/commands.properties

          fi
        done

        # Description Tracking for Deploy and Generic Test Step
        if [ -n "${{ env.DEPLOY_DESC }}" ]; then
          deploy_info=$(echo "${{ env.DEPLOY_DESC }}")
          echo "$deploy_info" >> $RUNNER_TEMP/deploy.txt
        fi

        if [ -n "${{ env.TEST_DESC }}" ]; then
          test_info=$(echo "${{ env.TEST_DESC }}")
          echo "$test_info" >> $RUNNER_TEMP/test.txt
        fi
                
    - name: Check test_report_path exists or not. Additionally, verify if the required parameters have been passed to generate the unit test report.
      if: ${{ contains(env.cmd_type, 'UNIT_TEST') || contains(env.cmd_type, 'INTEGRATION_TEST') || contains(env.cmd_type, 'TEST') }}   
      run: |
        
        # function to check empty variables and file existence
        check_empty() {
            local report_path=$1
            local reporter=$2
            local test_type=$3

            # Add "int_" prefix if test type is "INTEGRATION_TEST" to generate warning messages according to the test type
            if [ "$test_type" == "INTEGRATION_TEST" ]; then
                prefix="int_"
            elif [ "$test_type" == "UNIT_TEST" ]; then
                prefix="unit_"
            elif [ "$test_type" == "TEST" ]; then
                prefix=""
            fi

            if [ -z "$report_path" ] && [ -z "$reporter" ]; then
                echo "::warning::Test report link will not be generated for $test_type, as both the variables '${prefix}test_report_path' and '${prefix}test_reporter' have empty values!" 
            elif [ -z "$report_path" ]; then
                echo "::warning::Empty value passed for variable '${prefix}test_report_path'. Test report link will not be generated for $test_type!"
            elif [ -z "$reporter" ]; then
                echo "::warning::Empty value passed for variable '${prefix}test_reporter'. Test report link will not be generated for $test_type!"
            else
                # Check for the existence of report files
                if find . -type f -path "$report_path" -print -quit | grep -q .; then
                    echo -e "\e[32mSuccess\e[0m: $test_type report files found"
                else
                    echo "::error::No $test_type report files were found. The value of the variable '${prefix}test_report_path' may be incorrect for $test_type!"
                fi
            fi
        }

        # Calling a function for each cmd_type.
        IFS=',' read -ra cmd_types <<< "${{ env.cmd_type }}"
        for type in "${cmd_types[@]}"; do
            if [ "$type" == "UNIT_TEST" ]; then
              unit_test_report_path="${{ env.unit_test_report_path }}"
              unit_test_reporter="${{ env.unit_test_reporter }}"
              check_empty "$unit_test_report_path" "$unit_test_reporter" "$type"
           
            elif [ "$type" == "INTEGRATION_TEST" ]; then
              int_test_report_path="${{ env.int_test_report_path }}"
              int_test_reporter="${{ env.int_test_reporter }}"
              check_empty "$int_test_report_path" "$int_test_reporter" "$type"

            elif [ "$type" == "TEST" ]; then
              test_report_path="${{ env.test_report_path }}"
              test_reporter="${{ env.test_reporter }}"
              check_empty "$test_report_path" "$test_reporter" "$type"
            fi
        done 
        
      shell: bash

    - name: Unit Test Report
      uses: dorny/test-reporter@v1
      id : unit-test-result
      if: ${{ contains(env.cmd_type, 'UNIT_TEST') &&  env.unit_test_report_path !='' && env.unit_test_reporter !='' }}                   
      with:
        name: ${{ github.job }}-UNIT_TEST                          
        path: ${{ env.unit_test_report_path}}              # '**/target/**/*.xml'   
        reporter: ${{ env.unit_test_reporter }}                 # Format of test results. 
        only-summary: 'true' 
        fail-on-error: ${{ env.unit_test_fail_on_error || false }}     # Set action as failed if test report contains any failed test
        fail-on-empty: ${{ env.unit_test_fail_on_empty || false }}     # Set action as failed if no test report files were found

    - name: Integration Test Report
      uses: dorny/test-reporter@v1
      id : int-test-result
      if: ${{ contains(env.cmd_type, 'INTEGRATION_TEST') &&  env.int_test_report_path !='' && env.int_test_reporter !='' }}                   
      with:
        name: ${{ github.job }}-INTEGRATION_TEST                          
        path: ${{ env.int_test_report_path}}              # '**/target/**/*.xml'   
        reporter: ${{ env.int_test_reporter }}                 # Format of test results. 
        only-summary: 'true' 
        fail-on-error: ${{ env.int_test_fail_on_error || false }}     # Set action as failed if test report contains any failed test
        fail-on-empty: ${{ env.int_test_fail_on_empty || false }}     # Set action as failed if no test report files were found
    
    - name: Generic Test Report
      uses: dorny/test-reporter@v1
      id : test-result
      if: ${{ contains(env.cmd_type, 'TEST') &&  env.test_report_path !='' && env.test_reporter !='' }}                   
      with:
        name: ${{ github.job }}-TEST                          
        path: ${{ env.test_report_path}}              # '**/target/**/*.xml'   
        reporter: ${{ env.test_reporter }}                 # Format of test results. 
        only-summary: 'true' 
        fail-on-error: ${{ env.test_fail_on_error || false }}     # Set action as failed if test report contains any failed test
        fail-on-empty: ${{ env.test_fail_on_empty || false }}     # Set action as failed if no test report files were found
    
    - name: Check if UNIT_TEST/INTEGRATION_TEST/GENERIC_TEST commands were successfully executed 
      if: ${{ !cancelled() && (contains(env.cmd_type, 'UNIT_TEST') || contains(env.cmd_type, 'INTEGRATION_TEST') || contains(env.cmd_type, 'TEST')) }}
      id: test_commands_execution
      run: |
        exec=$(cat $RUNNER_TEMP/icons.properties)
        for exe in $exec
        do
          echo "$exe" >> $GITHUB_OUTPUT
        done
      shell: bash

    - name: Marking UNIT_TEST/INTEGRATION_TEST Step as failed if there are test failures
      if: ${{ !cancelled() && (contains(env.cmd_type, 'UNIT_TEST') || contains(env.cmd_type, 'INTEGRATION_TEST') || contains(env.cmd_type, 'TEST')) }}
      run: |
        icon="boom"
        if [ "${{ contains(env.cmd_type, 'UNIT_TEST') }}" ] && [ "${{ steps.test_commands_execution.outputs.unit_test }}" == "white_check_mark" ] && [ "${{ steps.unit-test-result.outputs.conclusion }}" == "failure" ] && [ "${{ steps.unit-test-result.outputs.url_html }}" != "" ]; then
          sed -i "s/unit_test=white_check_mark/unit_test=${icon}/g" $RUNNER_TEMP/icons.properties
        fi
        if [ "${{ contains(env.cmd_type, 'INTEGRATION_TEST') }}" ] && [ "${{ steps.test_commands_execution.outputs.integration_test }}" == "white_check_mark" ] && [ "${{ steps.int-test-result.outputs.conclusion }}" == "failure" ] && [ "${{ steps.int-test-result.outputs.url_html }}" != "" ]; then
          sed -i "s/integration_test=white_check_mark/integration_test=${icon}/g" $RUNNER_TEMP/icons.properties
        fi 
        if [ "${{ contains(env.cmd_type, 'TEST') }}" ] && [ "${{ steps.test_commands_execution.outputs.test }}" == "white_check_mark" ] && [ "${{ steps.test-result.outputs.conclusion }}" == "failure" ] && [ "${{ steps.test-result.outputs.url_html }}" != "" ]; then
          sed -i "s/test=white_check_mark/test=${icon}/g" $RUNNER_TEMP/icons.properties
        fi      
      shell: bash

    - name: Copy test report to target folder
      if: ${{ always() && ((env.unit_test_copy_to_target_path != '' && contains(env.cmd_type, 'UNIT_TEST')) || (env.int_test_copy_to_target_path != '' && contains(env.cmd_type, 'INTEGRATION_TEST')) || (env.test_copy_to_target_path != '' && contains(env.cmd_type, 'TEST'))) }}
      run: |

        # Function to copy test report files to target folder
        check_empty() {
            local report_path=$1
            local target_path=$2
            local test_type=$3

            # Add prefix to generate warning messages according to the test type
            if [ "$test_type" == "INTEGRATION_TEST" ]; then
                prefix="Integration"
            elif [ "$test_type" == "UNIT_TEST" ]; then
                prefix="Unit"
            elif [ "$test_type" == "TEST" ]; then
                prefix=""
            fi

            if [ ! -d "$target_path" ]; then
              echo "::error::Cannot copy files, as Destination folder does not exist for ${prefix} Test step!"
            elif ! find . -type f -path "$report_path" -print -quit | grep -q .; then
              echo "::error::Cannot copy files, as ${prefix} test report files were not found.!"
            else
              echo "Copy ${prefix} Test report files to target folder......"
              find . -path "$report_path" -exec cp -v {} $target_path \;
              echo -e "\e[32mSuccess\e[0m: All ${prefix} Test Report files successfully copied to the destination folder."
            fi
        }

        # Writing the Test Report Link to the file
        IFS=',' read -ra cmd_types <<< "${{ env.cmd_type }}"
        for type in "${cmd_types[@]}"; do
        
          # checking destination folder exist or not for Unit step, Integration step & Generic test Step.
          if [ "$type" == "UNIT_TEST" ] && [ "${{ env.unit_test_copy_to_target_path }}" != "" ]; then
            unit_test_report_path="${{ env.unit_test_report_path }}"
            unit_test_copy_to_target_path="${{ env.unit_test_copy_to_target_path }}"
            check_empty "$unit_test_report_path" "$unit_test_copy_to_target_path" "$type"
            
          elif [ "$type" == "INTEGRATION_TEST" ] && [ "${{ env.int_test_copy_to_target_path }}" != "" ]; then
            int_test_report_path="${{ env.int_test_report_path }}"
            int_test_copy_to_target_path="${{ env.int_test_copy_to_target_path }}"
            check_empty "$int_test_report_path" "$int_test_copy_to_target_path" "$type"    
         
          elif [ "$type" == "TEST" ] && [ "${{ env.test_copy_to_target_path }}" != "" ]; then
            test_report_path="${{ env.test_report_path }}"
            test_copy_to_target_path="${{ env.test_copy_to_target_path }}"
            check_empty "$test_report_path" "$test_copy_to_target_path" "$type"    
          fi

        done

      shell: bash

    - name: Fetch Test Report Url for Unit Test and Integration step
      if: ${{ always() && (contains(env.cmd_type, 'UNIT_TEST') || contains(env.cmd_type, 'INTEGRATION_TEST') || contains(env.cmd_type, 'TEST')) }}
      id: test-report
      run: |                  
        UNIT_TEST_REPORT_LINK="${{ steps.unit-test-result.outputs.url_html }}"
        INT_TEST_REPORT_LINK="${{ steps.int-test-result.outputs.url_html }}"
        TEST_REPORT_LINK="${{ steps.test-result.outputs.url_html }}"

        # Writing the Test Report Link to the file
        IFS=',' read -ra cmd_types <<< "${{ env.cmd_type }}"
        for type in "${cmd_types[@]}"; do
        
          if [ "$type" == "UNIT_TEST" ]; then
            if [ -z "$UNIT_TEST_REPORT_LINK" ]; then
              echo "::error:: Unit Test Report is not Generated"
            else
              echo -e "\e[32msuccess\e[0m Unit Test Report Generated: $UNIT_TEST_REPORT_LINK"
              UNIT_TEST_FILE_PATH="$RUNNER_TEMP/unit_test_links.txt"
              echo "url=$UNIT_TEST_REPORT_LINK" > $UNIT_TEST_FILE_PATH
            fi
  
          elif [ "$type" == "INTEGRATION_TEST" ]; then
            if [ -z "$INT_TEST_REPORT_LINK" ]; then
              echo "::error::Integration Test Report is not Generated"
            else
              echo -e "\e[32msuccess\e[0m Integration Test Report Generated: $INT_TEST_REPORT_LINK"
              INT_TEST_FILE_PATH="$RUNNER_TEMP/integration_test_links.txt"
              echo "url=$INT_TEST_REPORT_LINK" > $INT_TEST_FILE_PATH
            fi

          elif [ "$type" == "TEST" ]; then
            if [ -z "$TEST_REPORT_LINK" ]; then
              echo "::error::Test Report is not Generated"
            else
              echo -e "\e[32msuccess\e[0m Test Report Generated: $TEST_REPORT_LINK"
              TEST_FILE_PATH="$RUNNER_TEMP/test_links.txt"
              echo "url=$TEST_REPORT_LINK" > $TEST_FILE_PATH
            fi
          fi
        done
      
      shell: bash

      # Sonar section
    - name: Sonar Scan
      if: ${{ env.sonar_commands }}
      id: sonar-scan
      uses: lumada-common-services/gh-composite-actions@sonar-action

    - name: Sonar scan tracking
      shell: bash
      if: ${{ always() && env.sonar_commands }}
      run: |
        icon="boom"
        [[ "${{ steps.sonar-scan.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/sonar_scan=x/sonar_scan=${icon}/g" $RUNNER_TEMP/icons.properties

    # Citadel section
    - name: Prepare citadel Json file
      if: ${{ env.TRIGGER_CITADEL_SCAN }}
      shell: bash
      run: |
        pip3 install pyyaml==6.0.1

        python3 ${GITHUB_ACTION_PATH}/citadel/citadel.py \
          "${GITHUB_WORKSPACE}/citadel-config.yaml" "${{ env.PROJECT_PATH }}" "$GITHUB_WORKFLOW_REF" "$RUNNER_TEMP" \
          "${{ env.CODEDX_BRANCH }}" "${{ github.repository_owner }}" "${{ github.event.repository.name }},${{ github.ref_name }}" "${{ env.REPO_PATHS_INCLUDES }}" "${{ env.ARTIFACT_URLS }}" \
          "${{ env.BUILD_NAME }}" "${{ env.BUILD_NUMBER }}" "${{ env.BUILD_VERSION }}" "${{ env.ARTIFACTORY_USER }}" "${{ env.ARTIFACTORY_API_KEY }}" "${{ env.ARTIFACTORY_BASE_URL }}" "${{ env.JF_CLI_RT_NAME }}" \
          "${{ env.LOGGING_LEVEL }}" "${{ env.MANIFEST_PATH}}"
        
        echo "CITADEL_JSON_PATH=$RUNNER_TEMP/citadel.json" >> $GITHUB_ENV

    - name: Upload to the citadel host
      if: ${{ env.CITADEL_JSON_PATH }}
      id: citadel-scan 
      shell: bash
      run: |        
        file_paths="${{ env.CITADEL_JSON_PATH }}"
        # unset CITADEL_JSON_PATH so that it doesn't get trigger again by other steps
        echo "CITADEL_JSON_PATH=" >> $GITHUB_ENV
        IFS=', ' read -ra file_paths_array <<< "$file_paths"
        for file_path in "${file_paths_array[@]}"; do 
          echo "Processing File $file_path"
          cat $file_path
          curl -vvvX POST '${{ env.CITADEL_URL }}' --silent --fail --show-error -d @$file_path -H 'Content-Type: application/json' -H "Connection: close"  
          sleep ${{ env.CITADEL_JSON_LIST_SLEEP_SECONDS || 60  }}   # If env not passed, Sleeping for 60 seconds (default)
        done

    - name: Citadel scan tracking    
      shell: bash
      if: ${{ always() && env.TRIGGER_CITADEL_SCAN }}
      run: |
        icon="boom"
        [[ "${{ steps.citadel-scan.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/citadel_scan=x/citadel_scan=${icon}/g" $RUNNER_TEMP/icons.properties
        
    # Blackduck section
    - name: Blackduck Scan
      if: ${{ env.BlackDuck_Project_Name }}
      id: blackduck-scan
      uses: addnab/docker-run-action@v3
      with:
        username: ${{ env.BLACKDUCK_DOCKER_USERNAME }}
        password: ${{ env.BLACKDUCK_DOCKER_PASSWORD }}
        registry: one.hitachivantara.com
        image: one.hitachivantara.com/docker/blackducksoftware/detect:9
        options: --entrypoint "/bin/bash" -v ${{ github.workspace }}:/workdir
        run: |
          java -jar /synopsys-detect.jar \
           --detect.source.path=${{ env.BlackDuck_Source_Path || '/workdir' }} \
           --detect.project.version.name="${{ env.BlackDuck_Project_Version }}" \
           --detect.project.name="${{ env.BlackDuck_Project_Name }}" \
           --detect.accuracy.required=NONE \
           --blackduck.api.token="${{ env.BlackDuck_Api_Token }}" \
           --blackduck.url="${{ env.BlackDuck_Url }}" \
           --detect.blackduck.signature.scanner.snippet.matching="NONE" ${{ env.ADDITIONAL_ARGS }}

    # - name: Blackduck scan tracking
    #   shell: bash
    #   if: ${{ always() && env.BlackDuck_Project_Name }}
    #   run: |
    #     icon="boom"
    #     [[ "${{ steps.blackduck-scan.outcome }}" == "success" ]] && icon="white_check_mark"

    #     sed -i "s/blackduck_scan=x/blackduck_scan=${icon}/g" $RUNNER_TEMP/icons.properties

    # - name: OWASP Scan
    #   if: ${{ env.owasp_Project }}
    #   uses: dependency-check/Dependency-Check_Action@main
    #   id: owasp
    #   with:
    #     project: ${{ env.owasp_Project }}
    #     path: '.'
    #     format: 'ALL'
    #     out: 'reports'
    #     args: >
    #       --disableNodeJS \
    #       --disableAssembly \
    #       --disableYarnAudit \
    #       --enableRetired

    # Tagging
    - name: Prepare tagging
      if: ${{ env.Tag_version }}
      id: prepare-tagging
      shell: bash
      run: |
        push="true"
        if [ "${{ env.push_tag_only }}" == "true" ]; then
          push="origin ${{ env.Tag_version }} -f"
        fi
        
        echo "push=${push}" >> $GITHUB_OUTPUT

    - name: Create Tag
      if: ${{ env.Tag_version }}
      id: git-tag
      uses: EndBug/add-and-commit@v9
      with:
        add: '.'
        commit: --signoff
        default_author: github_actions
        message: '[CI/CD] - :robot: Changes captured in the ${{ env.Tag_version }} tag'
        tag: '${{ env.Tag_version }}'
        tag_push: '--force'
        pull: '--rebase --autostash'
        push: ${{ steps.prepare-tagging.outputs.push || true }}

    - name: Create tag tracking
      shell: bash
      if: ${{ always() && env.Tag_version }}
      run: |
        icon="boom"
        [[ "${{ steps.git-tag.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/create_tag=x/create_tag=${icon}/g" $RUNNER_TEMP/icons.properties

    - name: Publish Artifacts to Registry
      if: ${{ env.artifacts_manifest_file }}
      continue-on-error: false
      uses: lumada-common-services/registry-publication@stable
      with:
        ARTIFACTS_CONFIG_FILE: ${{ env.artifacts_manifest_file }}
        ARTIFACTORY_APIKEY: ${{ env.artifactory_api_key }}
        ARTIFACTORY_USER: ${{ env.artifactory_user }}
        BUILD_NUMBER: ${{ env.run_number }}
        BUILD_NAME: ${{ env.job }}
        BUILD_VERSION: ${{ env.pkg_version }}
        WORKSPACE: ${{ env.workspace }}
        BUILD_URL: ${{ env.build_url }}

    - name: Create and Update frogbot config file
      if: ${{ env.JF_CHANGED_PATHS && env.JF_URL }}
      run: |   
        python3 ${GITHUB_ACTION_PATH}/frogbot/frogbot.py "${{ env.JF_CHANGED_PATHS }}" "${GITHUB_WORKSPACE}" "${{ github.event.repository.name }}" "${{ github.head_ref }}"  
        cat .frogbot/frogbot-config.yml
      shell: bash  
    
    - name: FrogBot
      if: ${{ env.JF_URL }}    
      uses: jfrog/frogbot@v2.8.8
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}
        JF_GIT_TOKEN: ${{ env.JF_GIT_TOKEN }}
        JF_WORKING_DIR: ${{ env.JF_WORKING_DIR }}
        JF_FAIL: "FALSE"

    - name: Creating Kind Cluster 
      id: cluster-creation
      if: ${{env.KIND_CLUSTER_NAME && env.KIND_CLUSTER_ACTION == 'CREATE' }}
      run: |
        docker exec -i kind-container kind create cluster --name ${{ env.KIND_CLUSTER_NAME }} --config /mnt/${{env.CONFIG_FILE_NAME}}                              # Creating kind cluster inside of kind-container where Configuration file is at root level 
        docker exec -i kind-container kind export kubeconfig --name ${{ env.KIND_CLUSTER_NAME }} --kubeconfig /mnt/kubeconfig                                      # Exporting kubeconfig file to /mnt folder mapped to github workspace
        docker exec -i kind-container kind get clusters
        docker network connect kind bootstrap-image                                                                                                                # Connecting Bootstrap image to kind network                        
        kubectl config set-cluster kind-${{ env.KIND_CLUSTER_NAME }} --server=https://${{ env.KIND_CLUSTER_NAME }}-control-plane:6443 --kubeconfig=./kubeconfig
      shell: bash
    
    - name: Deleting Kind Cluster
      id: cluster-deletion
      if: ${{env.KIND_CLUSTER_NAME && env.KIND_CLUSTER_ACTION == 'DELETE' }}
      run : docker exec -i kind-container kind delete cluster --name ${{ env.KIND_CLUSTER_NAME }} 
      shell: bash

    - name: Read icon properties
      if: ${{ env.report }}
      id: all_icons
      shell: bash
      run: |
        props=$(cat $RUNNER_TEMP/icons.properties)

        for prop in $props
        do
          echo "$prop" >> $GITHUB_OUTPUT
        done

    - name: Read unit test report url
      if: ${{ env.report }}
      id: unit_test_url
      shell: bash
      run: |
        if [ -f $RUNNER_TEMP/unit_test_links.txt ]; then
          value=$(cat $RUNNER_TEMP/unit_test_links.txt)
          echo "$value" >> $GITHUB_OUTPUT
        else
          echo "url=" >> $GITHUB_OUTPUT
        fi

    - name: Read Inegration test report url
      if: ${{ env.report }}
      id: integration_test_url
      shell: bash
      run: |
        if [ -f $RUNNER_TEMP/integration_test_links.txt ]; then
          value=$(cat $RUNNER_TEMP/integration_test_links.txt)
          echo "$value" >> $GITHUB_OUTPUT
        else
          echo "url=" >> $GITHUB_OUTPUT
        fi 

    - name: Read generic test report url
      if: ${{ env.report }}
      id: generic_test_url
      shell: bash
      run: |
        if [ -f $RUNNER_TEMP/test_links.txt ]; then
          value=$(cat $RUNNER_TEMP/test_links.txt)
          echo "$value" >> $GITHUB_OUTPUT
        else
          echo "url=" >> $GITHUB_OUTPUT
        fi        

    - name: Report Summary Tracking
      if: ${{ env.report }}
      shell: bash
      run: |
        echo "| <div style="max-width:60%">Step/Command</div> | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|:---------|:-------:|" >> $GITHUB_STEP_SUMMARY
        echo "| Build | :${{ steps.all_icons.outputs.build }}: |" >> $GITHUB_STEP_SUMMARY

        #Unit Test
        if [ "${{ steps.all_icons.outputs.unit_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.unit_test }}" == "white_check_mark" ] && [ "${{ steps.unit_test_url.outputs.url }}" != "" ]; then
          echo "| [Unit Test](${{ steps.unit_test_url.outputs.url }}) | :${{ steps.all_icons.outputs.unit_test }}: |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Unit Test | :${{ steps.all_icons.outputs.unit_test }}: |" >> $GITHUB_STEP_SUMMARY
        fi
        
        #Integration Test
        if [ "${{ steps.all_icons.outputs.integration_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.integration_test }}" == "white_check_mark" ]; then
            if [ "${{ steps.integration_test_url.outputs.url }}" != "" ]; then
                echo "| [Integration Test](${{ steps.integration_test_url.outputs.url }}) | :${{ steps.all_icons.outputs.integration_test }}: |" >> $GITHUB_STEP_SUMMARY
            else
                echo "| Integration Test | :${{ steps.all_icons.outputs.integration_test }}: |" >> $GITHUB_STEP_SUMMARY
            fi
        fi

        #Generic Test
        if [ "${{ steps.all_icons.outputs.generic_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.generic_test }}" == "white_check_mark" ]; then
            TEST=Test
            if [ -f "$RUNNER_TEMP/test.txt" ]; then
              TEST="${TEST} $(cat $RUNNER_TEMP/test.txt)"
            fi

            if [ "${{ steps.generic_test_url.outputs.url }}" != "" ]; then
                echo "| [${TEST}](${{ steps.generic_test_url.outputs.url }}) | :${{ steps.all_icons.outputs.generic_test }}: |" >> $GITHUB_STEP_SUMMARY
            else
                echo "| ${TEST} | :${{ steps.all_icons.outputs.generic_test }}: |" >> $GITHUB_STEP_SUMMARY
            fi
        fi

        sonar_result="${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&"

        if [ "${{ env.SONAR_HOST_URL }}" != "" ] && [ "${{ env.SONAR_PROJECT_KEY }}" != "" ]  && [ "${{ steps.all_icons.outputs.sonar_scan }}" != "x" ]; then
            if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
              sonar_result+="pullRequest=${{ github.event.pull_request.number }}"
            else
              sonar_result+="branch=${GITHUB_REF#refs/heads/}"
            fi
            echo "| [Sonar Scan]($sonar_result) | :${{ steps.all_icons.outputs.sonar_scan }}: |" >> $GITHUB_STEP_SUMMARY
        else
            echo "| Sonar Scan | :${{ steps.all_icons.outputs.sonar_scan }}: |" >> $GITHUB_STEP_SUMMARY
        fi
             
        if [ "${{ github.event_name }}" != "pull_request" ] && [ "${{ github.event_name }}" != "pull_request_target" ]; then
          # if [ "${{ steps.all_icons.outputs.blackduck_scan }}" != "x" ]  && [ "${{ env.BLACKDUCK_SERVER_URL }}" != "" ]; then
          #   blackduck_result="${{ env.BLACKDUCK_SERVER_URL }}/api/projects/${{ env.BLACKDUCK_PROJ_ID }}/versions/${{ env.BLACKDUCK_VERSION_ID }}/components"
          #   echo "| [Blackduck Scan]($blackduck_result) | :${{ steps.all_icons.outputs.blackduck_scan }}: |" >> $GITHUB_STEP_SUMMARY
          # else
          #   echo "| Blackduck Scan | :${{ steps.all_icons.outputs.blackduck_scan }}: |" >> $GITHUB_STEP_SUMMARY
          # fi     
          echo "| Citadel Scan | :${{ steps.all_icons.outputs.citadel_scan }}: |" >> $GITHUB_STEP_SUMMARY
          echo "| Created Tag | :${{ steps.all_icons.outputs.create_tag }}: |" >> $GITHUB_STEP_SUMMARY

          DEPLOY=Deploy
          if [ -f "$RUNNER_TEMP/deploy.txt" ]; then
            DEPLOY="${DEPLOY} $(cat $RUNNER_TEMP/deploy.txt)"
          fi
          echo "| ${DEPLOY} | :${{ steps.all_icons.outputs.deploy }}: |" >> $GITHUB_STEP_SUMMARY
          
        fi

        # display all commands
        if [ -f "$RUNNER_TEMP/commands.properties" ]; then
         while IFS='=' read -r key value; do
           if [ "$value" == "" ]; then
             continue
           fi
           echo "| ${value} | :${key}: |" >> $GITHUB_STEP_SUMMARY
         done < "$RUNNER_TEMP/commands.properties"
        fi

        echo " > Note - Success :white_check_mark: , Executed But Failed :boom:  and Skipped/Not Executed :x: " >> $GITHUB_STEP_SUMMARY

    - name: Prepare Slack Notification
      if: ${{ env.report && env.Slack_Channel }}
      id: slack-template
      shell: bash
      run: |
        details=""
        commit=""
        # blackduck_result=""
        # blackduck_message=""
        citadel_result=""
        branch="${GITHUB_REF#refs/heads/}"

        #Unit Test
        if [ "${{ steps.all_icons.outputs.unit_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.unit_test }}" == "white_check_mark" ] && [ "${{ steps.unit_test_url.outputs.url }}" != "" ]; then
          unit_test="<${{ steps.unit_test_url.outputs.url }}|Unit Test>"
        else
          unit_test="Unit Test"
        fi
        
        #Integration Test
        if [ "${{ steps.all_icons.outputs.integration_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.integration_test }}" == "white_check_mark" ]; then
            if [ "${{ steps.integration_test_url.outputs.url }}" != "" ]; then
              integration_test="<${{ steps.integration_test_url.outputs.url }}|Integration Test>" 
            else
              integration_test="Integration Test"
            fi
        fi

        #Generic Test
        if [ "${{ steps.all_icons.outputs.generic_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.generic_test }}" == "white_check_mark" ]; then
            TEST=Test
            if [ -f "$RUNNER_TEMP/test.txt" ]; then
              TEST="${TEST} $(cat $RUNNER_TEMP/test.txt)"
            fi
            if [ "${{ steps.generic_test_url.outputs.url }}" != "" ]; then
              generic_test="<${{ steps.generic_test_url.outputs.url }}|$TEST>" 
            else
              generic_test="$TEST"
            fi
        fi

        if [ "${{ github.event_name }}" != "pull_request" ] && [ "${{ github.event_name }}" != "pull_request_target" ]; then
            if [ -z "${{ github.event.head_commit.url }}" ]; then
              # If ${{ github.event.head_commit.url }} empty, set a default value.
              details="Details"
            else
              details="<${{ github.event.head_commit.url }}| Details>"
            fi
            commit="${{ github.event.head_commit.message }}"
            # Check if the commit message is empty.
            if [ -z "$commit" ]; then
              # If it's empty, set a default message based on the triggering event.
              commit="$(echo "''Triggered by ${{ github.event_name }}")''"
            else
              commit="$(echo "''$commit" | tr '\n' ' ' | sed 's/ \+/ /g' | cut -c1-27)...''"      
            fi

            # blackduck_result="Blackduck"
            # if [ "${{ steps.all_icons.outputs.blackduck_scan }}" != "x" ]  && [ "${{ env.BLACKDUCK_SERVER_URL }}" != "" ]; then
            #   blackduck_result="<${{ env.BLACKDUCK_SERVER_URL }}/api/projects/${{ env.BLACKDUCK_PROJ_ID }}/versions/${{ env.BLACKDUCK_VERSION_ID }}/components|${blackduck_result}>"
            # fi
            # blackduck_message=":arrow_right: Result  :${{ steps.all_icons.outputs.blackduck_scan }}:"

            citadel_result="Citadel"
       
            DEPLOY=Deploy
            if [ -f "$RUNNER_TEMP/deploy.txt" ]; then
              DEPLOY="${DEPLOY} $(cat $RUNNER_TEMP/deploy.txt)"
            fi
            deploy_result="$DEPLOY"
          
        elif [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            details="<${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}| Details>"

        fi


        if [ "${{ env.SONAR_HOST_URL }}" != "" ] && [ "${{ env.SONAR_PROJECT_KEY }}" != "" ]  && [ "${{ steps.all_icons.outputs.sonar_scan }}" != "x" ]; then
          if [ "${{ github.event_name }}" == "pull_request" ] || [ "${{ github.event_name }}" == "pull_request_target" ]; then
            sonar_result="<${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&pullRequest=${{ github.event.pull_request.number }}|SonarQube>"
          else
            sonar_result="<${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&branch=${branch}|SonarQube>"
          fi
        else
          sonar_result="SonarQube"
        fi
        workflow_url="<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.event_name }}>"
        template="{ \"value\": \"Event: $workflow_url\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \"Build                    :${{ steps.all_icons.outputs.build }}:\n\", \"short\": true },"
        template="$template{ \"value\": \"${details}\", \"short\": true },"
        template="$template{ \"value\": \"$unit_test              :${{ steps.all_icons.outputs.unit_test }}:\n\", \"short\": true },"
        template="$template{ \"value\": \"Branch: ${branch}\", \"short\": true },"
     
         
        if [ "${{ steps.all_icons.outputs.integration_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.integration_test }}" == "white_check_mark" ]; then
          template="$template{ \"value\": \"$integration_test  :${{ steps.all_icons.outputs.integration_test }}:\", \"short\": true },"
          template="$template{ \"value\": \" \", \"short\": true },"
        fi

        if [ "${{ steps.all_icons.outputs.generic_test }}" == "boom" ] || [ "${{ steps.all_icons.outputs.generic_test }}" == "white_check_mark" ]; then
          template="$template{ \"value\": \"$generic_test      :${{ steps.all_icons.outputs.generic_test }}:\", \"short\": true },"
          template="$template{ \"value\": \" \", \"short\": true },"
        fi

        template="$template{ \"value\": \"$sonar_result         :${{ steps.all_icons.outputs.sonar_scan }}:\", \"short\": true },"

        template="$template{ \"value\": \"${commit}\", \"short\": true },"
      
        template="$template{ \"value\": \"${citadel_result}         :${{ steps.all_icons.outputs.citadel_scan }}:\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        
        template="$template{ \"value\": \"${deploy_result}         :${{ steps.all_icons.outputs.deploy }}:\", \"short\": true }"
         
        # template="$template{ \"value\": \"${blackduck_result}\", \"short\": true },"
        # template="$template{ \"value\": \" \", \"short\": true },"
        # template="$template{ \"value\": \"${blackduck_message}\", \"short\": true }"

        echo "slack-attach-fields=${template}" >> $GITHUB_OUTPUT

    - name: Slack Notification
      if: ${{ env.report && env.Slack_Channel }}
      uses: hv-actions/slack-action@stable
      env:
        SLACK_TOKEN: ${{ env.Slack_Token }}
      with:
          raw-input: >
            {
              "channel": "${{ env.Slack_Channel }}",
              "status": "${{ job.status }}",
              "attachments": [
                {
                  "fields": [
                    ${{ steps.slack-template.outputs.slack-attach-fields }}
                  ],
                  "footer": "by ${{ github.actor }}",
                  "footer_icon": "https://github.com/${{github.actor}}.png?size=20"
                }
              ]
            }

    - name: Teams Notification
      if: ${{ env.report && env.teams_Webhook_Url  }}
      uses: hv-actions/teams-notify-action@stable
      with:
        steps_json: '${{ env.steps_json }}'
        teams_Webhook_Url: '${{ env.teams_Webhook_Url }}'
        sonar_Host_Url: '${{ env.SONAR_HOST_URL }}'
        sonar_Project_Key: '${{env.SONAR_PROJECT_KEY}}'
        unit_test_url: '${{ steps.unit_test_url.outputs.url }}'
