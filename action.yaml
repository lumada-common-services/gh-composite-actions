name: Workflow Template
description: "Composite Action Template"
inputs:
  command:
    required: true
    description: "A command line statement"

runs:
  using: "composite"
  steps:

    - name: Setup Steps Tracking
      shell: bash
      run: |
        if [ ! -e $RUNNER_TEMP/icons.properties ]; then
          echo "sonar_scan=x" >> $RUNNER_TEMP/icons.properties
          echo "build=x" >> $RUNNER_TEMP/icons.properties
          echo "unit_test=x" >> $RUNNER_TEMP/icons.properties


          if [ "${{ github.event_name }}" == "push" ]; then
            echo "blackduck_scan=x" >> $RUNNER_TEMP/icons.properties
            echo "create_tag=x" >> $RUNNER_TEMP/icons.properties
          fi

        fi

    - name: Commands Execution
      if: ${{ inputs.command }}
      id: run-command
      run: ${{ inputs.command }}
      shell: bash

    - name: Commands Execution tracking
      shell: bash
      if: ${{ always() && inputs.command }}
      run: |
        icon="boom"

        if [ "${{ env.cmd_type }}" == "BUILD" ]; then

           [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
           sed -i "s/build=x/build=${icon}/g" $RUNNER_TEMP/icons.properties

        elif [ "${{ env.cmd_type }}" == "UNIT_TEST" ]; then

          [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
          sed -i "s/unit_test=x/unit_test=${icon}/g" $RUNNER_TEMP/icons.properties

        elif [ "${{ env.cmd_type }}" == "" ]; then

          [[ "${{ steps.run-command.outcome }}" == "success" ]] && icon="white_check_mark"
          cmd=$(echo "${{ inputs.command }}" | sed -e 's/|/\\|/')
          echo "${icon}=${cmd}" >> $RUNNER_TEMP/commands.properties

        fi


      # Sonar section
    - name: Sonar Scan
      if: ${{ env.sonar_commands }}
      id: sonar-scan
      uses: lumada-common-services/gh-composite-actions@sonar-action

    - name: Sonar scan tracking
      shell: bash
      if: ${{ always() && env.sonar_commands }}
      run: |
        icon="boom"
        [[ "${{ steps.sonar-scan.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/sonar_scan=x/sonar_scan=${icon}/g" $RUNNER_TEMP/icons.properties

    # Blackduck section
    - name: Blackduck Scan
      if: ${{ env.BlackDuck_Project_Name }}
      id: blackduck-scan
      uses: addnab/docker-run-action@v3
      with:
        image: docker.repo.orl.eng.hitachivantara.com/blackducksoftware/detect:8
        options: --entrypoint "/bin/bash" -v ${{ github.workspace }}:/workdir
        run: |
          java -jar /synopsys-detect.jar \
           --detect.source.path=${{ env.BlackDuck_Source_Path || '/workdir' }} \
           --detect.project.version.name="${{ env.BlackDuck_Project_Version }}" \
           --detect.project.name="${{ env.BlackDuck_Project_Name }}" \
           --blackduck.api.token="${{ env.BlackDuck_Api_Token }}" \
           --blackduck.url="${{ env.BlackDuck_Url }}" \
           --detect.blackduck.signature.scanner.snippet.matching="NONE" ${{ env.ADDITIONAL_ARGS }}

    - name: Blackduck scan tracking
      shell: bash
      if: ${{ always() && env.BlackDuck_Project_Name }}
      run: |
        icon="boom"
        [[ "${{ steps.blackduck-scan.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/blackduck_scan=x/blackduck_scan=${icon}/g" $RUNNER_TEMP/icons.properties

    - name: OWASP Scan
      if: ${{ env.owasp_Project }}
      uses: dependency-check/Dependency-Check_Action@main
      id: owasp
      with:
        project: ${{ env.owasp_Project }}
        path: '.'
        format: 'ALL'
        out: 'reports'
        args: >
          --disableNodeJS \
          --disableAssembly \
          --disableYarnAudit \
          --enableRetired

    # Tagging
    - name: Prepare tagging
      if: ${{ env.Tag_version }}
      id: prepare-tagging
      shell: bash
      run: |
        push="true"
        if [ "${{ env.push_tag_only }}" == "true" ]; then
          push="origin ${{ env.Tag_version }} -f"
        fi
        
        echo "push=${push}" >> $GITHUB_OUTPUT

    - name: Create Tag
      if: ${{ env.Tag_version }}
      id: git-tag
      uses: EndBug/add-and-commit@v9
      with:
        add: '.'
        commit: --signoff
        default_author: github_actions
        message: '[CI/CD] - :robot: Changes captured in the ${{ env.Tag_version }} tag'
        tag: '${{ env.Tag_version }}'
        tag_push: '--force'
        pull: '--rebase --autostash'
        push: ${{ steps.prepare-tagging.outputs.push || true }}

    - name: Create tag tracking
      shell: bash
      if: ${{ always() && env.Tag_version }}
      run: |
        icon="boom"
        [[ "${{ steps.git-tag.outcome }}" == "success" ]] && icon="white_check_mark"

        sed -i "s/create_tag=x/create_tag=${icon}/g" $RUNNER_TEMP/icons.properties

    - name: Publish Artifacts to Registry
      if: ${{ env.artifacts_manifest_file }}
      continue-on-error: false
      uses: lumada-common-services/registry-publication@v1.1.1
      with:
        ARTIFACTS_CONFIG_FILE: ${{ env.artifacts_manifest_file }}
        ARTIFACTORY_APIKEY: ${{ env.artifactory_api_key }}
        ARTIFACTORY_USER: ${{ env.artifactory_user }}
        BUILD_NUMBER: ${{ env.run_number }}
        BUILD_NAME: ${{ env.job }}
        BUILD_VERSION: ${{ env.pkg_version }}
        WORKSPACE: ${{ env.workspace }}
        BUILD_URL: ${{ env.build_url }}

    - name: Create and Update frogbot config file
      if: ${{ env.JF_CHANGED_PATHS && env.JF_URL }}
      run: |   
        python3 ${GITHUB_ACTION_PATH}/frogbot/frogbot.py "${{ env.JF_CHANGED_PATHS }}" "${GITHUB_WORKSPACE}" "${{ github.event.repository.name }}" "${{ github.head_ref }}"  
        cat .frogbot/frogbot-config.yml
      shell: bash  
    
    - name: FrogBot
      if: ${{ env.JF_URL }}    
      uses: jfrog/frogbot@v2.8.8
      env:
        JF_URL: ${{ env.JF_URL }}
        JF_ACCESS_TOKEN: ${{ env.JF_ACCESS_TOKEN }}
        JF_GIT_TOKEN: ${{ env.JF_GIT_TOKEN }}
        JF_WORKING_DIR: ${{ env.JF_WORKING_DIR }}
        JF_FAIL: "FALSE"

    - name: Creating Kind Cluster 
      id: cluster-creation
      if: ${{env.KIND_CLUSTER_NAME && env.KIND_CLUSTER_ACTION == 'CREATE' }}
      run: |
        docker exec -i kind-container kind create cluster --name ${{ env.KIND_CLUSTER_NAME }} --config /mnt/${{env.CONFIG_FILE_NAME}}                              # Creating kind cluster inside of kind-container where Configuration file is at root level 
        docker exec -i kind-container kind export kubeconfig --name ${{ env.KIND_CLUSTER_NAME }} --kubeconfig /mnt/kubeconfig                                      # Exporting kubeconfig file to /mnt folder mapped to github workspace
        docker exec -i kind-container kind get clusters
        docker network connect kind bootstrap-image                                                                                                                # Connecting Bootstrap image to kind network                        
        kubectl config set-cluster kind-${{ env.KIND_CLUSTER_NAME }} --server=https://${{ env.KIND_CLUSTER_NAME }}-control-plane:6443 --kubeconfig=./kubeconfig
      shell: bash
    
    - name: Deleting Kind Cluster
      id: cluster-deletion
      if: ${{env.KIND_CLUSTER_NAME && env.KIND_CLUSTER_ACTION == 'DELETE' }}
      run : docker exec -i kind-container kind delete cluster --name ${{ env.KIND_CLUSTER_NAME }} 
      shell: bash

    - name: Read icon properties
      if: ${{ env.report }}
      id: all_icons
      shell: bash
      run: |
        props=$(cat $RUNNER_TEMP/icons.properties)

        for prop in $props
        do
          echo "$prop" >> $GITHUB_OUTPUT
        done

    - name: Report Summary Tracking
      if: ${{ env.report }}
      shell: bash
      run: |
        echo "| <div style="max-width:60%">Step/Command</div> | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|:---------|:-------:|" >> $GITHUB_STEP_SUMMARY
        echo "| Build | :${{ steps.all_icons.outputs.build }}: |" >> $GITHUB_STEP_SUMMARY
        echo "| Unit Test | :${{ steps.all_icons.outputs.unit_test }}: |" >> $GITHUB_STEP_SUMMARY


        sonar_result="${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&"

        if [ "${{ env.SONAR_HOST_URL }}" != "" ] && [ "${{ env.SONAR_PROJECT_KEY }}" != "" ]  && [ "${{ steps.all_icons.outputs.sonar_scan }}" != "x" ]; then
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              sonar_result+="pullRequest=${{ github.event.pull_request.number }}"
            elif [ "${{ github.event_name }}" == "push" ]; then
              sonar_result+="branch=${GITHUB_REF#refs/heads/}"
            fi
            echo "| [Sonar Scan]($sonar_result) | :${{ steps.all_icons.outputs.sonar_scan }}: |" >> $GITHUB_STEP_SUMMARY
        else
            echo "| Sonar Scan | :${{ steps.all_icons.outputs.sonar_scan }}: |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ github.event_name }}" == "push" ]; then
          if [ "${{ steps.all_icons.outputs.blackduck_scan }}" != "x" ]  && [ "${{ env.BLACKDUCK_SERVER_URL }}" != "" ]; then
            blackduck_result="${{ env.BLACKDUCK_SERVER_URL }}/api/projects/${{ env.BLACKDUCK_PROJ_ID }}/versions/${{ env.BLACKDUCK_VERSION_ID }}/components"
            echo "| [Blackduck Scan]($blackduck_result) | :${{ steps.all_icons.outputs.blackduck_scan }}: |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Blackduck Scan | :${{ steps.all_icons.outputs.blackduck_scan }}: |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "| Created Tag | :${{ steps.all_icons.outputs.create_tag }}: |" >> $GITHUB_STEP_SUMMARY
        fi


        # display all commands
        if [ -f "$RUNNER_TEMP/commands.properties" ]; then
         while IFS='=' read -r key value; do
           if [ "$value" == "" ]; then
             continue
           fi
           echo "| ${value} | :${key}: |" >> $GITHUB_STEP_SUMMARY
         done < "$RUNNER_TEMP/commands.properties"
        fi

    - name: Prepare Slack Notification
      if: ${{ env.report && env.Slack_Channel }}
      id: slack-template
      shell: bash
      run: |
        details=""
        commit=""
        blackduck_result=""
        blackduck_message=""
        branch="${GITHUB_REF#refs/heads/}"
        if [ "${{ github.event_name }}" == "push" ]; then
            details="<${{ github.event.head_commit.url}}| Details>"
            commit="$(echo "''${{ github.event.head_commit.message }}" | cut -c1-27) ...''"

            blackduck_result="Blackduck"
            if [ "${{ steps.all_icons.outputs.blackduck_scan }}" != "x" ]  && [ "${{ env.BLACKDUCK_SERVER_URL }}" != "" ]; then
              blackduck_result="<${{ env.BLACKDUCK_SERVER_URL }}/api/projects/${{ env.BLACKDUCK_PROJ_ID }}/versions/${{ env.BLACKDUCK_VERSION_ID }}/components|${blackduck_result}>"
            fi

            blackduck_message=":arrow_right: Result  :${{ steps.all_icons.outputs.blackduck_scan }}:"

        elif [ "${{ github.event_name }}" == "pull_request" ]; then
            details="<${{ github.server_url }}/${{ github.repository }}/pull/${{ github.event.pull_request.number }}| Details>"

        fi


        if [ "${{ env.SONAR_HOST_URL }}" != "" ] && [ "${{ env.SONAR_PROJECT_KEY }}" != "" ]  && [ "${{ steps.all_icons.outputs.sonar_scan }}" != "x" ]; then
          if [ "${{ github.event_name }}" == "pull_request" ]; then
          sonar_result="<${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&pullRequest=${{ github.event.pull_request.number }}|SonarQube>"
          elif [ "${{ github.event_name }}" == "push" ]; then
          sonar_result="<${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}&branch=${branch}|SonarQube>"
          fi
        else
          sonar_result="SonarQube"
        fi
        workflow_url="<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.event_name }}>"
        template="{ \"value\": \"Event: $workflow_url\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \"Build\", \"short\": true },"
        template="$template{ \"value\": \"${details}\", \"short\": true },"
        template="$template{ \"value\": \":arrow_right: Result  :${{ steps.all_icons.outputs.build }}:\n\", \"short\": true },"
        template="$template{ \"value\": \"Branch: ${branch}\", \"short\": true },"
        template="$template{ \"value\": \"Unit Test\", \"short\": true },"
        template="$template{ \"value\": \"${commit}\", \"short\": true },"
        template="$template{ \"value\": \":arrow_right: Result  :${{ steps.all_icons.outputs.unit_test }}:\n\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \"$sonar_result\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \":arrow_right: Result  :${{ steps.all_icons.outputs.sonar_scan }}:\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \"${blackduck_result}\", \"short\": true },"
        template="$template{ \"value\": \" \", \"short\": true },"
        template="$template{ \"value\": \"${blackduck_message}\", \"short\": true }"

        echo "slack-attach-fields=${template}" >> $GITHUB_OUTPUT

    - name: Slack Notification
      if: ${{ env.report && env.Slack_Channel }}
      uses: hv-actions/slack-action@v3
      env:
        SLACK_TOKEN: ${{ env.Slack_Token }}
      with:
          raw-input: >
            {
              "channel": "${{ env.Slack_Channel }}",
              "status": "${{ job.status }}",
              "attachments": [
                {
                  "fields": [
                    ${{ steps.slack-template.outputs.slack-attach-fields }}
                  ],
                  "footer": "by ${{ github.actor }}",
                  "footer_icon": "https://github.com/${{github.actor}}.png?size=20"
                }
              ]
            }
